@using PROG301_MVC_Currency.Interfaces;
@using static PROG301_MVC_Currency.Statics.Repos.CurRep;
@using static PROG301_MVC_Currency.Statics.Currency;
@model PROG301_MVC_Currency.ViewModels.CurrencyRepoViewModel;

@{

    var reptypes = ViewData["RepTypes"] as Type[] ?? throw new NullReferenceException(nameof(ViewData));

    var title = ViewData["Title"] as string ?? throw new NullReferenceException(nameof(ViewData));

    ICoin GetICoin(Type t) => (ICoin)Activator.CreateInstance(t);
}

<header style="display: flex;
    flex-flow: column;
    align-content: center;
    justify-content: space-between">
    <h1 style="align-self: center;
        padding: 2rem;">
        Currency Repo Controller
    </h1>
    <h2 style="align-self: center;">
        @title
    </h2>
    <div style="display: flex;
        flex-flow: row;
        align-content: center;
        justify-content: space-between;
        margin-bottom: 2rem;">
        <h3>Type: @Model.Type.Name</h3>

        <h3>Count: @Model.CoinCount</h3>

        <h3>Value(@CurSymbolDict[RepoCoinType[Model.Type]]): @Model.TotalValue</h3>

        <h3>Value(XAU): @Model.TotalXAUValue)</h3>
    </div>

</header>
<table class="table"
       style="border: .25rem solid black;">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Value
            </th>
            <th>
                XAU
            </th>
            <th>
                Count
            </th>
            <th>
                Total Value
            </th>
            <th>
                Total XAU
            </th>
            <th>
                View
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var coinCount in Model.CoinCounts)
        {
            if (coinCount.Value > 0)
            {
                ICoin c = GetICoin(coinCount.Key);
                decimal totalval = c.Value * coinCount.Value;
                decimal totalxau = c.XAUValue * coinCount.Value;
                string sXAUValue = c.XAUValue.ToString("G");
                string sXAUTotal = totalxau.ToString("G");
                <tr>
                    <td>
                        @Html.DisplayFor(model => coinCount.Key.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(model => c.Value)
                    </td>
                    <td>
                        @Html.DisplayFor(model => sXAUValue)
                    </td>
                    <td>
                        @Html.DisplayFor(model => coinCount.Value)
                    </td>
                    <td>
                        @Html.DisplayFor(model => totalval)
                    </td>
                    <td>
                        @Html.DisplayFor(model => sXAUTotal)
                    </td>
                    <td>
                        @Html.ActionLink("View", "ViewCoins", "CurrencyRepo", new { type = coinCount.Key.Name })
                    </td>
                </tr>
            }
        }
    </tbody>
</table>